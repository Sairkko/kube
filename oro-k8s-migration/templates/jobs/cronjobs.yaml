{{- if .Values.jobs.enabled }}
{{- if .Values.jobs.cacheWarmup.enabled }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "orocommerce.fullname" . }}-cache-warmup
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "orocommerce.labels" . | nindent 4 }}
    app.kubernetes.io/component: cronjob
spec:
  schedule: {{ .Values.jobs.cacheWarmup.schedule | quote }}
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            {{- include "orocommerce.selectorLabels" . | nindent 12 }}
            app.kubernetes.io/component: cronjob
        spec:
          restartPolicy: OnFailure
          {{- with .Values.global.imagePullSecrets }}
          imagePullSecrets:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- include "orocommerce.securityContext" . | nindent 10 }}
          containers:
            - name: cache-warmup
              image: "{{ .Values.jobs.cacheWarmup.image.repository }}:{{ .Values.jobs.cacheWarmup.image.tag }}"
              imagePullPolicy: IfNotPresent
              command:
                - /bin/sh
                - -c
                - |
                  set -e
                  echo "Démarrage du cache warmup..."
                  
                  # Attendre que l'application soit prête
                  while ! nc -z {{ include "orocommerce.fullname" . }}-backend {{ .Values.backend.service.port }}; do
                    echo "En attente de l'application..."
                    sleep 5
                  done
                  
                  # Vider le cache
                  php bin/console cache:clear --env=prod
                  
                  # Warmup du cache
                  php bin/console cache:warmup --env=prod
                  
                  # Optimiser les performances
                  php bin/console doctrine:ensure-production-settings --env=prod
                  
                  echo "Cache warmup terminé avec succès"
              env:
                {{- include "orocommerce.env" . | nindent 16 }}
              volumeMounts:
                - name: cache-volume
                  mountPath: /var/www/html/var/cache
              {{- include "orocommerce.resources" .Values.jobs.cacheWarmup | nindent 14 }}
          volumes:
            - name: cache-volume
              emptyDir: {}
          {{- include "orocommerce.nodeSelector" .Values.backend | nindent 10 }}
          {{- include "orocommerce.tolerations" .Values.backend | nindent 10 }}
---
{{- end }}
{{- if .Values.jobs.logCleanup.enabled }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "orocommerce.fullname" . }}-log-cleanup
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "orocommerce.labels" . | nindent 4 }}
    app.kubernetes.io/component: cronjob
spec:
  schedule: {{ .Values.jobs.logCleanup.schedule | quote }}
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            {{- include "orocommerce.selectorLabels" . | nindent 12 }}
            app.kubernetes.io/component: cronjob
        spec:
          restartPolicy: OnFailure
          {{- with .Values.global.imagePullSecrets }}
          imagePullSecrets:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- include "orocommerce.securityContext" . | nindent 10 }}
          containers:
            - name: log-cleanup
              image: "{{ .Values.jobs.logCleanup.image.repository }}:{{ .Values.jobs.logCleanup.image.tag }}"
              imagePullPolicy: IfNotPresent
              command:
                - /bin/sh
                - -c
                - |
                  set -e
                  echo "Démarrage du nettoyage des logs..."
                  
                  # Nettoyer les logs de plus de 30 jours
                  find /var/log -name "*.log" -type f -mtime +30 -exec rm -f {} \;
                  find /var/log -name "*.log.*" -type f -mtime +30 -exec rm -f {} \;
                  
                  # Compresser les logs de plus de 7 jours
                  find /var/log -name "*.log" -type f -mtime +7 -exec gzip {} \;
                  
                  # Nettoyer les fichiers temporaires
                  find /tmp -type f -mtime +7 -exec rm -f {} \;
                  
                  # Afficher l'utilisation du disque
                  df -h /var/log
                  
                  echo "Nettoyage des logs terminé avec succès"
              volumeMounts:
                - name: logs-volume
                  mountPath: /var/log
              {{- include "orocommerce.resources" .Values.jobs.logCleanup | nindent 14 }}
          volumes:
            - name: logs-volume
              persistentVolumeClaim:
                claimName: {{ include "orocommerce.fullname" . }}-logs
          {{- include "orocommerce.nodeSelector" .Values.backend | nindent 10 }}
          {{- include "orocommerce.tolerations" .Values.backend | nindent 10 }}
---
{{- end }}
# Job de maintenance des données OroCommerce
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "orocommerce.fullname" . }}-maintenance
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "orocommerce.labels" . | nindent 4 }}
    app.kubernetes.io/component: cronjob
spec:
  schedule: "0 1 * * *"  # Tous les jours à 1h du matin
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            {{- include "orocommerce.selectorLabels" . | nindent 12 }}
            app.kubernetes.io/component: cronjob
        spec:
          restartPolicy: OnFailure
          {{- with .Values.global.imagePullSecrets }}
          imagePullSecrets:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- include "orocommerce.securityContext" . | nindent 10 }}
          containers:
            - name: maintenance
              image: "{{ .Values.backend.image.repository }}:{{ .Values.backend.image.tag }}"
              imagePullPolicy: IfNotPresent
              command:
                - /bin/sh
                - -c
                - |
                  set -e
                  echo "Démarrage de la maintenance OroCommerce..."
                  
                  # Nettoyage des caches expirés
                  php bin/console oro:cron:cleanup --env=prod
                  
                  # Nettoyage des données temporaires
                  php bin/console oro:cron:cleanup-orphaned-data --env=prod
                  
                  # Optimisation des index de recherche
                  php bin/console oro:search:reindex --env=prod
                  
                  # Nettoyage des sessions expirées
                  php bin/console oro:session:cleanup --env=prod
                  
                  # Statistiques d'utilisation
                  php bin/console oro:platform:update-analytics --env=prod
                  
                  echo "Maintenance terminée avec succès"
              env:
                {{- include "orocommerce.env" . | nindent 16 }}
              volumeMounts:
                - name: media-storage
                  mountPath: /var/www/html/public/media
                - name: logs
                  mountPath: /var/www/html/var/logs
              resources:
                limits:
                  cpu: 1
                  memory: 2Gi
                requests:
                  cpu: 500m
                  memory: 1Gi
          volumes:
            - name: media-storage
              persistentVolumeClaim:
                claimName: {{ include "orocommerce.fullname" . }}-media
            - name: logs
              persistentVolumeClaim:
                claimName: {{ include "orocommerce.fullname" . }}-logs
          {{- include "orocommerce.nodeSelector" .Values.backend | nindent 10 }}
          {{- include "orocommerce.tolerations" .Values.backend | nindent 10 }}
{{- end }} 