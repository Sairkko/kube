# Configuration de développement pour OroCommerce
# Paramètres optimisés pour le développement et les tests

# Configuration globale
global:
  domain: oro.local
  storageClass: standard
  imagePullSecrets: []

# Configuration du Frontend (Nginx)
frontend:
  enabled: true
  replicaCount: 1                      # Une seule réplique pour le dev
  image:
    repository: nginx
    tag: "1.25-alpine"
    pullPolicy: IfNotPresent
  
  service:
    type: NodePort
    port: 80
    targetPort: 80
  
  ingress:
    enabled: false                     # Désactivé pour le dev local
  
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi

# Configuration du Backend (OroCommerce App)
backend:
  enabled: true
  replicaCount: 1                      # Une seule réplique pour le dev
  image:
    repository: oroinc/orocommerce-application
    tag: "6.1"
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 9000
    targetPort: 9000
  
  # Auto-scaling désactivé pour le dev
  autoscaling:
    enabled: false
  
  resources:
    limits:
      cpu: 2
      memory: 4Gi
    requests:
      cpu: 500m
      memory: 1Gi
  
  # Variables d'environnement
  env:
    - name: ORO_APP_DOMAIN
      value: "oro.local"
    - name: ORO_DB_HOST
      value: "orocommerce-postgresql"
    - name: ORO_DB_NAME
      value: "orocommerce"
    - name: ORO_DB_USER
      value: "orocommerce"
    - name: ORO_REDIS_HOST
      value: "orocommerce-redis-master"
    - name: ORO_ELASTICSEARCH_HOST
      value: "orocommerce-elasticsearch"
    - name: ORO_ELASTICSEARCH_PORT
      value: "9200"
    - name: APP_ENV
      value: "dev"
    - name: SYMFONY_ENV
      value: "dev"
  
  # Configuration des secrets
  secrets:
    - name: ORO_DB_PASSWORD
      key: postgres-password
      secret: orocommerce-postgresql
    - name: ORO_REDIS_PASSWORD
      key: redis-password
      secret: orocommerce-redis
  
  # Probes de santé plus permissives
  livenessProbe:
    httpGet:
      path: /health
      port: 9000
    initialDelaySeconds: 120
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5
  
  readinessProbe:
    httpGet:
      path: /ready
      port: 9000
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

# Configuration PostgreSQL (via Bitnami)
postgresql:
  enabled: true
  auth:
    postgresPassword: "postgres123"
    username: "orocommerce"
    password: "orocommerce123"
    database: "orocommerce"
  
  architecture: standalone
  
  primary:
    persistence:
      enabled: true
      storageClass: standard
      size: 10Gi                       # Moins d'espace pour le dev
    
    resources:
      limits:
        cpu: 1
        memory: 2Gi
      requests:
        cpu: 500m
        memory: 1Gi
    
    # Configuration PostgreSQL basique
    pgHbaConfiguration: |
      local all all trust
      host all all 127.0.0.1/32 trust
      host all all ::1/128 trust
      host all all 0.0.0.0/0 md5
    
    configuration: |
      max_connections = 100
      shared_buffers = 512MB
      effective_cache_size = 1GB
      maintenance_work_mem = 128MB
      checkpoint_completion_target = 0.9
      wal_buffers = 8MB
      default_statistics_target = 100
      random_page_cost = 1.1
      effective_io_concurrency = 200
      work_mem = 5MB
      min_wal_size = 512MB
      max_wal_size = 2GB

# Configuration Redis (via Bitnami)
redis:
  enabled: true
  auth:
    enabled: true
    password: "redis123"
  
  architecture: standalone
  
  master:
    persistence:
      enabled: true
      storageClass: standard
      size: 2Gi                        # Moins d'espace pour le dev
    
    resources:
      limits:
        cpu: 500m
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 512Mi
    
    # Configuration Redis basique
    configuration: |
      maxmemory 512mb
      maxmemory-policy allkeys-lru
      save 900 1
      save 300 10
      save 60 10000
      tcp-keepalive 300

# Configuration Elasticsearch (via Bitnami)
elasticsearch:
  enabled: true
  
  master:
    replicaCount: 1                     # Une seule réplique pour le dev
    persistence:
      enabled: true
      storageClass: standard
      size: 5Gi
    
    resources:
      limits:
        cpu: 1
        memory: 2Gi
      requests:
        cpu: 500m
        memory: 1Gi
    
    # Configuration Elasticsearch basique
    heapSize: 1g
    
    # Configuration JVM
    extraEnvVars:
      - name: ES_JAVA_OPTS
        value: "-Xms1g -Xmx1g"
      - name: discovery.type
        value: "single-node"
  
  data:
    replicaCount: 1                     # Une seule réplique pour le dev
    persistence:
      enabled: true
      storageClass: standard
      size: 10Gi
    
    resources:
      limits:
        cpu: 1
        memory: 2Gi
      requests:
        cpu: 500m
        memory: 1Gi
    
    heapSize: 1g

# Configuration du monitoring
monitoring:
  enabled: true
  
  prometheus:
    enabled: true
    server:
      persistentVolume:
        enabled: true
        storageClass: standard
        size: 5Gi                      # Moins d'espace pour le dev
      
      resources:
        limits:
          cpu: 500m
          memory: 1Gi
        requests:
          cpu: 250m
          memory: 512Mi
    
    alertmanager:
      enabled: true
      persistentVolume:
        enabled: true
        storageClass: standard
        size: 1Gi
  
  grafana:
    enabled: true
    adminPassword: "admin123"
    
    persistence:
      enabled: true
      storageClass: standard
      size: 2Gi
    
    resources:
      limits:
        cpu: 250m
        memory: 512Mi
      requests:
        cpu: 100m
        memory: 256Mi

# Configuration SSL/TLS désactivée pour le dev
tls:
  enabled: false

# Configuration des volumes partagés
volumes:
  media:
    storageClass: standard
    size: 5Gi                          # Moins d'espace pour le dev
    accessMode: ReadWriteOnce          # RWO pour le dev
  
  logs:
    storageClass: standard
    size: 2Gi                          # Moins d'espace pour le dev
    accessMode: ReadWriteOnce          # RWO pour le dev

# Configuration des services workers
workers:
  enabled: true
  replicaCount: 1                      # Un seul worker pour le dev
  
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 250m
      memory: 512Mi

# Configuration des jobs de maintenance
jobs:
  enabled: true
  
  # Job de warm-up du cache
  cacheWarmup:
    enabled: true
    schedule: "0 6 * * *"              # Une fois par jour à 6h
    image:
      repository: oroinc/orocommerce-application
      tag: "6.1"
    
    resources:
      limits:
        cpu: 500m
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 512Mi
  
  # Job de nettoyage des logs
  logCleanup:
    enabled: true
    schedule: "0 2 * * 0"              # Une fois par semaine
    image:
      repository: busybox
      tag: "1.36"
    
    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 50m
        memory: 64Mi

# Configuration des NetworkPolicies désactivée pour le dev
networkPolicies:
  enabled: false

# Configuration des PodSecurityPolicies désactivée pour le dev
podSecurityPolicy:
  enabled: false

# Configuration des ServiceMonitors pour Prometheus
serviceMonitor:
  enabled: true
  
  # Intervalle de scraping
  interval: 30s
  
  # Endpoints à monitorer
  endpoints:
    - port: metrics
      path: /metrics
      interval: 30s 