apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "database.fullname" . }}
  labels:
    app: {{ include "database.name" . }}
spec:
  serviceName: {{ include "database.fullname" . }}
  replicas: {{ .Values.database.replicas }}
  selector:
    matchLabels:
      app: {{ include "database.name" . }}
  template:
    metadata:
      labels:
        app: {{ include "database.name" . }}
      annotations:
        # Annotations Prometheus - Désactivé car PostgreSQL n'expose pas de métriques par défaut
        # prometheus.io/scrape: "true"
        # prometheus.io/port: "5432"
        # prometheus.io/path: "/metrics"
    spec:
      containers:
        - name: postgresql
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: 5432
              protocol: TCP
              name: postgresql
          env:
            - name: POSTGRES_ROOT_PASSWORD
              value: {{ .Values.env.POSTGRES_ROOT_PASSWORD }}
            - name: POSTGRES_DB
              value: {{ .Values.env.POSTGRES_DB }}
            - name: POSTGRES_USER
              value: {{ .Values.env.POSTGRES_USER }}
            - name: POSTGRES_PASSWORD
              value: {{ .Values.env.POSTGRES_PASSWORD }}
          readinessProbe:
            exec:
              command:
                - pg_isready
                - -U{{ .Values.env.POSTGRES_USER }}
                - -d{{ .Values.env.POSTGRES_DB }}
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          livenessProbe:
            exec:
              command:
                - pg_isready
                - -U{{ .Values.env.POSTGRES_USER }}
                - -d{{ .Values.env.POSTGRES_DB }}
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
          resources:
            limits:
              cpu: "1000m"
              memory: "1Gi"
            requests:
              cpu: "500m"
              memory: "512Mi"
          volumeMounts:
            - name: postgresql-data
              mountPath: /var/lib/postgresql/data
  volumeClaimTemplates:
    - metadata:
        name: postgresql-data
      spec:
        accessModes: ["ReadWriteOnce"]
        {{- if .Values.database.storage.storageClass }}
        storageClassName: {{ .Values.database.storage.storageClass }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.database.storage.size }}
