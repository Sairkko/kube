{{- if .Values.jobs.cleanupVolumes.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "orocommerce-simple.fullname" . }}-cleanup-volumes
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ include "orocommerce.name" . }}
    {{- include "orocommerce.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-delete
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  backoffLimit: 1
  activeDeadlineSeconds: 300
  ttlSecondsAfterFinished: 100
  template:
    metadata:
      labels:
        app: {{ include "orocommerce.name" . }}-cleanup-volumes
        {{- include "orocommerce.labels" . | nindent 8 }}
    spec:
      restartPolicy: Never
      containers:
      - name: cleanup-volumes
        image: busybox:1.35
        command: 
        - sh
        - -c
        - |
          echo "Starting volume cleanup..."
          
          # Supprimer les fichiers de marqueur
          rm -f /var/www/oro/.volume-initialized
          
          # Nettoyer les caches
          rm -rf /var/www/oro/var/cache/*
          rm -rf /var/www/oro/var/logs/*
          
          # Nettoyer les donn√©es temporaires
          rm -rf /var/www/oro/var/data/temp/*
          
          echo "Volume cleanup completed"
        volumeMounts:
        - name: oro-app-storage
          mountPath: /var/www/oro
        - name: cache-storage
          mountPath: /var/www/oro/var/cache
        - name: private-storage
          mountPath: /var/www/oro/var/data
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: oro-app-storage
        persistentVolumeClaim:
          claimName: oro-app-{{ .Release.Name }}
      - name: cache-storage
        persistentVolumeClaim:
          claimName: cache-{{ .Release.Name }}
      - name: private-storage
        persistentVolumeClaim:
          claimName: private-storage-{{ .Release.Name }}
{{- end }} 